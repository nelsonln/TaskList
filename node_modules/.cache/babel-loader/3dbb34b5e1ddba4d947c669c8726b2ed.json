{"ast":null,"code":"var _jsxFileName = \"/Users/nelson.lin/nelson-test/src/components/Todo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Todo(props) {\n  _s();\n\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n  const [isEditing, setEditing] = useState(false);\n  useEffect(() => {\n    if (isEditing) {\n      editFieldRef.current.focus();\n    } else {\n      editButtonRef.current.focus();\n    }\n  }, [isEditing]);\n\n  const editingTemplate = /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"stack-small\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"todo-label\",\n        htmlFor: props.id,\n        children: [\"New name for \", props.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: props.id,\n        className: \"todo-text\",\n        type: \"text\",\n        value: props.newName,\n        onChange: handleChange,\n        ref: editFieldRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn todo-cancel\",\n        onClick: () => setEditing(false),\n        children: [\"Cancel\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: [\"renaming \", props.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn__primary todo-edit\",\n        children: [\"Save\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: [\"new name for \", props.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n\n  const viewTemplate = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stack-small\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"c-cb\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: props.id,\n        type: \"checkbox\",\n        defaultChecked: props.completed,\n        onChange: () => props.toggleTaskCompleted(props.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"todo-label\",\n        htmlFor: props.id,\n        children: props.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn\",\n        onClick: () => setEditing(true),\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn__danger\",\n        onClick: () => props.deleteTask(props.id),\n        ref: editButtonRef,\n        children: [\"Delete \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n\n  const [newName, setNewName] = useState('');\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"todo\",\n    children: isEditing ? editingTemplate : viewTemplate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 14\n  }, this);\n}\n\n_s(Todo, \"y3PVpzmJmBiyOFamRbKcItasZLo=\");\n\n_c = Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/nelson.lin/nelson-test/src/components/Todo.js"],"names":["React","useEffect","useRef","useState","Todo","props","editFieldRef","editButtonRef","isEditing","setEditing","current","focus","editingTemplate","handleSubmit","id","name","newName","handleChange","viewTemplate","completed","toggleTaskCompleted","deleteTask","setNewName","e","target","value","preventDefault","editTask"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nexport default function Todo(props) {\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n    const [isEditing, setEditing] = useState(false);\n    useEffect(() => {\n      if (isEditing) {\n        editFieldRef.current.focus();\n      }else {\n        editButtonRef.current.focus();\n      }\n    }, [isEditing]);\n    \n    const editingTemplate = (\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label className=\"todo-label\" htmlFor={props.id}>\n              New name for {props.name}\n            </label>\n            <input\n                id={props.id}\n                className=\"todo-text\"\n                type=\"text\"\n                value={props.newName}\n                onChange={handleChange}\n                ref={editFieldRef}\n            />\n          </div>\n          <div className=\"btn-group\">\n            <button\n                type=\"button\"\n                className=\"btn todo-cancel\"\n                onClick={() => setEditing(false)}\n            >\n                    Cancel\n                    <span className=\"visually-hidden\">renaming {props.name}</span>\n            </button>\n            <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n              Save\n              <span className=\"visually-hidden\">new name for {props.name}</span>\n            </button>\n          </div>\n        </form>\n      );\n\n      const viewTemplate = (\n        <div className=\"stack-small\">\n          <div className=\"c-cb\">\n              <input\n                id={props.id}\n                type=\"checkbox\"\n                defaultChecked={props.completed}\n                onChange={() => props.toggleTaskCompleted(props.id)}\n              />\n              <label className=\"todo-label\" htmlFor={props.id}>\n                {props.name}\n              </label>\n            </div>\n            <div className=\"btn-group\">\n                <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)}>\n                    Edit <span className=\"visually-hidden\">{props.name}</span>\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn__danger\"\n                    onClick={() => props.deleteTask(props.id)}\n                    ref={editButtonRef}\n                >\n                    Delete <span className=\"visually-hidden\">{props.name}</span>\n                </button>\n            </div>\n        </div>\n      );\n\n      const [newName, setNewName] = useState('');\n      function handleChange(e) {\n        setNewName(e.target.value);\n      }\n\n      function handleSubmit(e) {\n        e.preventDefault();\n        props.editTask(props.id, newName);\n        setNewName(\"\");\n        setEditing(false);\n      }\n\n      return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n  }"]},"metadata":{},"sourceType":"module"}