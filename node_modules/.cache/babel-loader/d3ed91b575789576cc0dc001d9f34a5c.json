{"ast":null,"code":"var _jsxFileName = \"/Users/nelson.lin/nelson-test/TaskList/src/components/Todo.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Todo(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState('');\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n  const wasEditing = usePrevious(isEditing);\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  useEffect(() => {\n    if (isEditing) {\n      editFieldRef.current.focus();\n    } else {\n      editButtonRef.current.focus();\n    }\n  }, [isEditing]);\n\n  function usePrevious(value) {\n    _s();\n\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n  }\n\n  _s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\n  const editingTemplate = /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"stack-small\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"todo-label\",\n        htmlFor: props.id,\n        children: [\"New name for \", props.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: props.id,\n        className: \"todo-text\",\n        type: \"text\",\n        value: newName,\n        onChange: handleChange,\n        ref: editFieldRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn todo-cancel\",\n        onClick: () => setEditing(false),\n        children: [\"Cancel\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: [\"renaming \", props.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn__primary todo-edit\",\n        children: [\"Save\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: [\"new name for \", props.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n\n  const viewTemplate = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stack-small\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"c-cb\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: props.id,\n        type: \"checkbox\",\n        defaultChecked: props.completed,\n        onChange: () => props.toggleTaskCompleted(props.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"todo-label\",\n        htmlFor: props.id,\n        children: props.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn\",\n        onClick: () => setEditing(true),\n        ref: editButtonRef,\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn__danger\",\n        onClick: () => props.deleteTask(props.id),\n        children: [\"Delete \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"todo\",\n    children: isEditing ? editingTemplate : viewTemplate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 14\n  }, this);\n}\n\n_s2(Todo, \"wty2LFvLjeZJqAVTSFbOh/PAiDA=\", true);\n\n_c = Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/nelson.lin/nelson-test/TaskList/src/components/Todo.js"],"names":["React","useEffect","useRef","useState","Todo","props","isEditing","setEditing","newName","setNewName","editFieldRef","editButtonRef","wasEditing","usePrevious","handleChange","e","target","value","handleSubmit","preventDefault","editTask","id","current","focus","ref","editingTemplate","name","viewTemplate","completed","toggleTaskCompleted","deleteTask"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nexport default function Todo(props) {\n    const [isEditing, setEditing] = useState(false);\n    const [newName, setNewName] = useState('');\n    const editFieldRef = useRef(null);\n    const editButtonRef = useRef(null);\n    const wasEditing = usePrevious(isEditing);\n\n\n    function handleChange(e) {\n        setNewName(e.target.value);\n    }\n      \n    function handleSubmit(e) {\n        e.preventDefault();\n        props.editTask(props.id, newName);\n        setNewName(\"\");\n        setEditing(false);\n    }\n    useEffect(() => {\n        if (isEditing) {\n          editFieldRef.current.focus();\n        } else {\n          editButtonRef.current.focus();\n        }\n    }, [isEditing]);      \n\n    function usePrevious(value) {\n        const ref = useRef();\n        useEffect(() => {\n          ref.current = value;\n        });\n        return ref.current;\n    }\n      \n      \n    const editingTemplate = (\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n                <label className=\"todo-label\" htmlFor={props.id}>\n                New name for {props.name}\n                </label>\n                <input\n                    id={props.id}\n                    className=\"todo-text\"\n                    type=\"text\"\n                    value={newName}\n                    onChange={handleChange}\n                    ref={editFieldRef}\n                />\n            </div>\n            <div className=\"btn-group\">\n            <button\n                type=\"button\"\n                className=\"btn todo-cancel\"\n                onClick={() => setEditing(false)}\n                >\n                Cancel\n                <span className=\"visually-hidden\">renaming {props.name}</span>\n            </button>\n\n            <button type=\"submit\" className=\"btn btn__primary todo-edit\">Save\n                <span className=\"visually-hidden\">new name for {props.name}</span>\n            </button>\n            </div>\n        </form>\n      );\n\n      const viewTemplate = (\n        <div className=\"stack-small\">\n          <div className=\"c-cb\">\n              <input\n                id={props.id}\n                type=\"checkbox\"\n                defaultChecked={props.completed}\n                onChange={() => props.toggleTaskCompleted(props.id)}\n              />\n              <label className=\"todo-label\" htmlFor={props.id}>\n                {props.name}\n              </label>\n            </div>\n            <div className=\"btn-group\">\n            <button\n                type=\"button\"\n                className=\"btn\"\n                onClick={() => setEditing(true)}\n                ref={editButtonRef}\n                >\n                Edit <span className=\"visually-hidden\">{props.name}</span>\n            </button>\n\n\n              <button\n                type=\"button\"\n                className=\"btn btn__danger\"\n                onClick={() => props.deleteTask(props.id)}\n              >\n                Delete <span className=\"visually-hidden\">{props.name}</span>\n              </button>\n            </div>\n        </div>\n      );\n\n      return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n  }\n  \n  "]},"metadata":{},"sourceType":"module"}