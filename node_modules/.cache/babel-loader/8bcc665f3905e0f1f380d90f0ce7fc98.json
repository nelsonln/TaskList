{"ast":null,"code":"var _jsxFileName = \"/Users/nelson.lin/nelson-test/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  //filter button\n  const [filter, setFilter] = useState('All');\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this)); // task control\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: filterList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"v+kyZzRZYf3hvqDAJQij3ie9bAA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nelson.lin/nelson-test/src/App.js"],"names":["React","useState","nanoid","Form","FilterButton","Todo","App","props","filter","setFilter","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","filterList","map","name","tasks","setTasks","addTask","newTask","id","toggleTaskCompleted","updatedTasks","deleteTask","remainingTasks","editTask","newName","editedTaskList","taskList","tasksNoun","length","headingText"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nfunction App(props) {\n  //filter button\n  const [filter, setFilter] = useState('All');\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n  // task control\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function addTask(name){\n    const newTask = { id: \"todo-\"+nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id){\n    const remainingTasks = tasks.filter(task=>id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => (\n    <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    )\n  );\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}